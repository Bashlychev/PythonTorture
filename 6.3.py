# # Тема урока: модуль math
# # Модуль math
# # Решение задач
# # Аннотация. Урок посвящен модулю math, который содержит математические функции по работе с вещественными числами.

# # Модули
# # Как уже говорилось, одним из преимуществ языка Python является множество разнообразных функций, которые уже реализованы и готовы к использованию. Такие функции упакованы в модули. В Python модулем называется библиотека функций, которую можно подключать к своим программам.

# # Модуль math
# # Модуль math – один из наиважнейших в Python. Этот модуль предоставляет обширный функционал для проведения вычислений с вещественными числами (числами с плавающей точкой).

# # Для использования этих функций в начале программы необходимо подключить модуль, что делается командой import:

# # import math

# # # программный код
# # После подключения модуля мы можем использовать его функции. Пусть мы хотим:

# # вычислить 
# # 2
# # 2
# # ​
# #   (корень квадратный из двух);
# # округлить число 
# # 3.8
# # 3.8 до ближайшего целого числа вверх и вниз
# # Соответствующий программный код, решающий задачи выглядит так:

# # import math

# # num1 = math.sqrt(2)     # вычисление квадратного корня из двух
# # num2 = math.ceil(3.8)   # округление числа вверх
# # num3 = math.floor(3.8)  # округление числа вниз

# # print(num1)
# # print(num2)
# # print(num3)
# # и выводит:

# # 1.4142135623730951
# # 4
# # 3
# # Особенности подключения модулей
# # Как можно заметить из примера выше, для вызова функции мы вынуждены указывать название модуля и символ точки. С другой стороны, если функции используются достаточно часто, то такой вызов (постоянное указание названия модуля и символа точки) может усложнить программу и сделать её менее читабельной. Для того, чтобы не указывать название модуля и символ точки при вызове функций, мы пишем следующий код:

# # from math import *

# # num1 = sqrt(2)     # вычисление корня квадратного из двух
# # num2 = ceil(3.8)   # округление числа вверх
# # num3 = floor(3.8)  # округление числа вниз

# # print(num1)
# # print(num2)
# # print(num3)
# # Таким образом, подключение модуля следующим образом:

# # from math import *
# # позволяет не писать название модуля и символ точки. При таком способе подключения, импортируются абсолютно все функции модуля math.

# # Если нужно использовать только некоторые функции модуля, то мы можем импортировать только их следующим образом:

# # from math import sqrt, ceil
# # Теперь мы можем вызывать функции sqrt() и ceil() без префикса math., однако мы не можем вызвать функцию floor(), так как она не подключена:

# # from math import sqrt, ceil

# # print(sqrt(25))
# # print(ceil(34.7))

# # print(floor(12.8))  # приведет к ошибке, так как функция floor не подключена
# # Список функций модуля math
# # Список наиболее часто используемых функций модуля math:

# # Функция	Описание
# # Округления
# # int()	Округляет число в сторону нуля
# # round(x)	Округляет число x до ближайшего целого. Если дробная часть числа равна 0.5, то число округляется до ближайшего четного числа
# # round(x, n)	Округляет число x до n знаков после точки
# # floor(x)	Округляет число x вниз («пол»)
# # ceil(x)	Округляет число x вверх («потолок»)
# # abs(x)	Модуль числа x (абсолютная величина)
# # Корни, логарифмы, степени и факториал
# # sqrt(x)	Квадратный корень числа x
# # pow(x, n)	Возведение числа x в степень n
# # log(x)	Натуральный логарифм числа x. Основание натурального логарифма равно числу e
# # log10(x)	Десятичный логарифм числа x. Основание десятичного логарифма равно числу 10
# # log(x, b)	Логарифм числа x по основанию b
# # factorial(n)	Факториал натурального числа n
# # Тригонометрия
# # degrees(x)	Преобразует угол x, заданный в радианах, в градусы
# # radians(x)	Преобразует угол x, заданный в градусах, в радианы
# # cos(x)	Косинус угла x, задаваемого в радианах
# # sin(x)	Синус угла x, задаваемого в радианах
# # tan(x)	Тангенс угла x, задаваемого в радианах
# # acos(x)	Возвращает угол в радианах от 
# # 0
# # 0 до 
# # �
# # π, cos которого равен x
# # asin(x)	Возвращает угол в радианах от 
# # −
# # �
# # 2
# # − 
# # 2
# # π
# # ​
# #   до 
# # �
# # 2
# # 2
# # π
# # ​
# #  , sin которого равен x
# # atan(x)	Возвращает угол в радианах от 
# # −
# # �
# # 2
# # − 
# # 2
# # π
# # ​
# #   до 
# # �
# # 2
# # 2
# # π
# # ​
# #  , tan которого равен x
# # atan2(y, x)	Полярный угол (в радианах) точки с координатами (x, y)
# #     Для извлечения квадратного корня можно воспользоваться кодом n ** 0.5, вместо math.sqrt(n).

# # Список констант модуля math
# # Модуль math предоставляет ряд встроенных математических констант:

# #      Константа   	Описание
# # pi	Число 
# # �
# # =
# # 3.141592653589793
# # π=3.141592653589793
# # e	
# # Число 
# # �
# # =
 
# # 2.718281828459045
# # e= 2.718281828459045 (константа Эйлера)

# # Примечания
# # Примечание 1. Все функции модуля math возвращают значение, которое можно вывести на экран, присвоить другой переменной или использовать в математическом выражении.

# # Примечание 2. Для использования функций int(), float(), abs(), min(), max(), round() подключать модуль math нет необходимости. Это так называемые встроенные функции.

# # Примечание 3. Вызов функций pow(x, n) можно заменить использованием оператора возведения в степень: x**n.

# Евклидово расстояние
# На плоскости евклидово расстояние между двумя точками 
# (
# �
# 1
# ;
# �
# 1
# )
# (x 
# 1
# ​
#  ;y 
# 1
# ​
#  ) и 
# (
# �
# 2
# ;
# �
# 2
# )
# (x 
# 2
# ​
#  ;y 
# 2
# ​
#  ) определяется так 
# �
# =
# (
# �
# 1
# −
# �
# 2
# )
# 2
# +
# (
# �
# 1
# −
# �
# 2
# )
# 2
# ρ= 
# (x 
# 1
# ​
#  −x 
# 2
# ​
#  ) 
# 2
#  +(y 
# 1
# ​
#  −y 
# 2
# ​
#  ) 
# 2
 
# ​
#  .



# Напишите программу определяющую евклидово расстояние между двумя точками, координаты которых заданы.

# Формат входных данных
# На вход программе подается четыре вещественных числа, каждое на отдельной строке – 
# �
# 1
# ,
# �
# 1
# ,
# �
# 2
# ,
# �
# 2
# x 
# 1
# ​
#  ,y 
# 1
# ​
#  ,x 
# 2
# ​
#  ,y 
# 2
# ​
#  ​.

# Формат выходных данных
# Программа должна вывести одно число – евклидово расстояние.

# from math import *
# x1,y1,x2,y2 = float(input()),float(input()),float(input()),float(input())
# x = pow((x1-x2),2)
# y = pow((y1-y2),2)
# print(pow((x+y),0.5))

# Площадь и длина
# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу 
# �
# R.

# Формат входных данных
# На вход программе подается одно вещественное число 
# �
# R​.

# Формат выходных данных
# Программа должна вывести два числа – площадь круга и длину окружности радиуса 
# �
# R.

# from math import *
# R = float(input())
# S = pi*((R)**2)
# C = 2*pi*R
# print(S)
# print(C)

# Средние значения
# В математике выделяют следующие средние значения:

# среднее арифметическое чисел 
# �
# a и 
# �
# b: 
# �
# +
# �
# 2
# 2
# a+b
# ​
#  ;
 
# среднее геометрическое чисел 
# �
# a и 
# �
# b: 
# �
# ⋅
# �
# a⋅b
# ​
#  ;
 
# среднее гармоническое чисел 
# �
# a и 
# �
# b: 
# 2
# �
# �
# �
# +
# �
# a+b
# 2ab
# ​
#  ;
 
# среднее квадратичное чисел 
# �
# a и 
# �
# b: 
# �
# 2
# +
# �
# 2
# 2
# 2
# a 
# 2
#  +b 
# 2
 
# ​
 
# ​
#  .
# Формат входных данных
# На вход программе подается два вещественных числа 
# �
# a и 
# �
# b​, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести 4 числа – среднее арифметическое, геометрическое, гармоническое и квадратичное.


# from math import *
# a, b = float(input()), float(input())
# avg1 = (a+b)/2
# avg2 = sqrt(a*b)
# avg3 = ((a*b)+(a*b))/(a+b)
# avg4 = sqrt(((a**2)+(b**2))/2)
# print(avg1), print(avg2),print(avg3),print(avg4)


# Тригонометрическое выражение
# Напишите программу, вычисляющую значение тригонометрического выражения
# sin
# ⁡
# �
# +
# cos
# ⁡
# �
# +
# tan
# ⁡
# 2
# �
# sinx+cosx+tan 
# 2
#  x
#  по заданному числу градусов 
# �
# x.

# Формат входных данных
# На вход программе подается одно вещественное число 
# �
# x измеряемое в градусах​. 

# Формат выходных данных
# Программа должна вывести одно число – значение тригонометрического выражения.

# Примечание 1. Тригонометрические функции принимают аргумент в радианах. Чтобы перевести градусы в радианы, воспользуйтесь формулой 
# �
# =
# �
# ⋅
# �
# 180
# r= 
# 180
# x⋅π
# ​
 

# Примечание 2. Модуль math содержит встроенную функцию radians(), которая переводит угол из градусов в угол в радианах.

# from math import *
# x = float(input())
# r = x * pi / 180
# sol1 = sin(r)+cos(r)+(tan(r)*tan(r))
# print(sol1)

# Пол и потолок
# Напишите программу, вычисляющую значение 
# ⌈
# �
# ⌉
 
# +
# ⌊
# �
# ⌋
# ⌈x⌉ +⌊x⌋ по заданному вещественному числу 
# �
# x.

# Формат входных данных
# На вход программе подается одно вещественное число 
# �
# x.

# Формат выходных данных
# Программа должна вывести одно число – значение указанного выражения.

# Примечание. 
# ⌈
# �
# ⌉
# ⌈x⌉ – потолок числа, 
# ⌊
# �
# ⌋
# ⌊x⌋ – пол числа.

# from math import *
# x = float(input())
# print((ceil(x)+floor(x)))

# Квадратное уравнение 🌶️🌶️
# Даны три вещественных числа 
# �
# a, 
# �
# b, 
# �
# c. Напишите программу, которая находит вещественные корни квадратного уравнения 
# �
# �
# 2
# +
# �
# �
# +
# �
# =
# 0.
# ax 
# 2
#  +bx+c=0.
# Если уравнение имеет два корня, то следует вывести их в порядке возрастания.

# Формат входных данных
# На вход программе подается три вещественных числа 
# �
# ≠
# 0
# ,
# �
# ,
# �
# a
# 
# =0,b,c, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести вещественные корни уравнения каждый на отдельной строке, если они существуют, или текст «Нет корней» в противном случае.

# from math import *
# a,b,c = float(input()),float(input()),float(input())
# # ax2+bx+c=0.
# D = pow(b,2)-4*a*c
# # mn = (-b - sqrt(D))/(2*a)
# # mx = (-b + sqrt(D))/(2*a)
# sec = ((-b)/(2*a))
# if D > 0:
#     x1 = (-b + sqrt(D))/(2*a)
#     x2 = (-b - sqrt(D))/(2*a)
#     print(min(x1, x2))
#     print(max(x1, x2))
# elif D == 0:
#         print(sec)
# else:
#             print('Нет корней')

# Правильный многоугольник
# Правильный многоугольник — выпуклый многоугольник, у которого равны все стороны и все углы между смежными сторонами. Площадь правильного многоугольника с длиной стороны 
# �
# a и количеством сторон 
# �
# n вычисляется по формуле: 
# �
# =
# �
# ⋅
# �
# 2
# 4
# tg
# ⁡
# (
# �
# �
# )
# S= 
# 4tg( 
# n
# π
# ​
#  )
# n⋅a 
# 2
 
# ​
 
# Даны два числа: натуральное число 
# �
# n и вещественное число 
# �
# a. Напишите программу, которая находит площадь указанного правильного многоугольника.

# Формат входных данных
# На вход программе подается два числа 
# �
# n и 
# �
# a, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести вещественное число – площадь многоугольника.

# from math import *
# n,a = int(input()), float(input())
# # r = n * pi / 180
# S = (n*(a**2))/(4*tan(pi/n))
# print(S)

